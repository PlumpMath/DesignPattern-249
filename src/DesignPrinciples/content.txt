一.单一职责原则(single responsibility principle)应该有且只有一个原因引起类的变更
1)将对象的属性和行为分开
2)用"职责"和"变化原因"来衡量接口或类是否设计优良.

二.里氏替换原则(LiskovSubstitution Principle ,LSP)
所有引用基类的地方必须能够透明的使用其子类的对象
1)子类必须完全实现父类的方法
2)子类可以有自己的个性
3)覆盖或实现父类的方法时输入的参数可以被放大
4)覆写或实现父类的方法时输出的结果可以被缩小

三.依赖倒置原则(Dependence Inversion Principle,DIP)
1)高层模块不应该依赖低层模块,两者都应该依赖其抽象
2)抽象不应该依赖其细节
3)细节应该依赖抽象
4)每个类尽量都有接口或者抽象类,或者抽象类和接口都具有
5)变量的表面类型尽量是接口或者抽象类型
6)任何类都不应该从具体类派生
7)尽量不要覆写基类的方法
8)结合里氏替换原则使用


四.接口隔离原则(Interface Segregation Principle)
1)接口尽量细化,接口中的方法尽量少
2)接口尽量小,不能出现臃肿的接口
3)接口要高内聚
4)定制服务,只提供给访问者需要的方法


五.迪米特法则(Law of Demeter lod) 最少知识原则
1)一个对象应该被其他对象有最少的了解

六.开闭原则(Open close Principle)
1)软件实体应当对扩展开放，对修改关闭。开闭原则中“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；开闭原则中“闭”，是指对于原有代码的修改是封闭的，即不应该修改原有的代码


 